// ====================================================================================================
// DNN Subscribo for Second Life
// Â© 2017 dnnsoftware.com
//      v1.0 : 2017 May 10
//      v1.1 : 2017 Jun 16 - Moved subscription list name to object description. When logo is touched,
//          displays the currently valid promos.
// ====================================================================================================


// Constants and global variables ---------------------------------------------------------------------

integer FACESUBSCRIBE = 0;
integer FACEUNSUBSCRIBE = 1;
integer FACEPROMOS = 3;
integer FACERESET = 4;
integer g_iFace;

string URLDNNSOFTWARE = "http://www.dnnsoftware.com/";
string TGTDOMAIN = "https://dnnapi.com/content/api";
string DNNUSERCONTENTTYPEID =  "00000000-0000-0000-0000-000000000000";  // "SL User"
string DNNPROMOCONTENTTYPEID = "00000000-0000-0000-0000-000000000000";  // "SL Promo"

string sImgUrl = "http://...";

list BASIC_HTTP_PARAMETERS = [
    HTTP_MIMETYPE, "application/json",
    HTTP_BODY_MAXLENGTH, 16384,   // max length for Mono
    HTTP_PRAGMA_NO_CACHE, TRUE,
    HTTP_CUSTOM_HEADER, "Authorization", "Bearer 00000000000000000000000000000000"
    ];

string DEFAULTMAILINGLIST = "Other";
string g_sMailingList = DEFAULTMAILINGLIST;
list g_lSubscribeValues = [];
list g_lWithdrawValues = [];
list g_lValuesToUpdate = [];

string MSGADDED = "You have been successfully subscribed";
string MSGREMOVED = "You have been unsubscribed";
string g_sSuccessMsg = "";

string g_sUserJson;

string t_kDNNID;
string t_kUserUUID;
string t_sUsername;
key t_kHttpReqGet;
key t_kHttpReqPut;
key t_kHttpReqPost;

float WAITSECS = 60.0;

string HORILINE = "\n----------------------------------------------------------------------------------------------------\n";


// Functions ------------------------------------------------------------------------------------------


// Notifies with only an OK button in a dialog box and repeats in the chat window.
notifyUser( key kUser, string msg )  {
    llDialog( kUser, msg, [ "OK" ], -123456789 );
    llInstantMessage( kUser, HORILINE + msg + HORILINE );
}


// Returns a string to be used as the body of a POST or a PUT.
string createBody( key kUUID, string sName, string sMailList )  {

    list lDetails = [
        "sLUUID", (string) kUUID,
        "subscriptions", sMailList
    ];

    list lTags = [
        "SL",
        "Second Life"
    ];

    list lRet = [
        "contentTypeId", DNNUSERCONTENTTYPEID,
        "name", sName,
        "description", "",
        "details", llList2Json( JSON_OBJECT, lDetails ),
        "tags", llList2Json( JSON_ARRAY, lTags )
    ];

    return( llList2Json( JSON_OBJECT, lRet ) );
}


// Accepts a JSON string and returns it with updated info to use as the body of a PUT.
// lKeyValuePairs is a strided list, where each stride contains:
//  * key - A comma-separated string of the components to the correct node.
//  * value - The new value for the key.
//  * action - 0 to override; 1 to append the new value, separated by a comma; 2 to append the new value to an array; -1 to remove the value; -2 to remove the value from an array.
// Unmentioned nodes are retained as is.
string updateBody( string sJson, list lKeyValuePairs )  {
    list lPath;
    list lOldVal;
    string sOldVal;
    string sNewVal;
    integer iAct;
    integer index;
    integer i;
    integer iCount = llGetListLength( lKeyValuePairs );
    for ( i = 0; i < iCount; i += 3 )  {
        lPath = llParseString2List( llList2String( lKeyValuePairs, i ), [","], [] );
        sNewVal = llList2String( lKeyValuePairs, i + 1 );
        iAct = llList2Integer( lKeyValuePairs, i + 2 );

        // Add to array
        if ( iAct == 2 )  {
            // Get the old value (array).
            sOldVal = llJsonGetValue( sJson, lPath );
            lOldVal = llJson2List( sOldVal );

            // Is the new value already there?
            index = llListFindList( lOldVal, [ sNewVal ] );

            // Append if not yet in lOldVal. If already there, no need do anything.
            if ( index == -1 )  {
                lOldVal += [ sNewVal ];
                sNewVal = llList2Json( JSON_ARRAY, lOldVal );
            }
        }

        // Append (duplicates ok)
        else if ( iAct == 1 )  {
            // Get the old value (string).
            sOldVal = llJsonGetValue( sJson, lPath );
            sNewVal = sOldVal + "," + sNewVal;
        }

        // Override
        else if ( iAct == 0 )  {
            // Keep the value of sNewVal.
        }

        // Delete
        else if ( iAct == -1 )  {
            sNewVal = "";
        }

        // Remove from array
        else if ( iAct == -2 )  {
            // Get the old value (array).
            sOldVal = llJsonGetValue( sJson, lPath );
            lOldVal = llJson2List( sOldVal );

            // Is the new value already there?
            index = llListFindList( lOldVal, [ sNewVal ] );

            // Remove from lOldVal. If not there, no need to do anything.
            if ( index > -1 )  {
                lOldVal = llDeleteSubList( lOldVal, index, index );
                sNewVal = llList2Json( JSON_ARRAY, lOldVal );
            }
        }

        // Replace the value in the JSON.
        sJson = llJsonSetValue( sJson, lPath, sNewVal );
    };
    return(sJson);
}


// Returns the record (as JSON string) of the "SL User" content item that matches the specified key and value.
string getRecord( string sBody, list lKeyPath, string sValue )  {
    string sItems = llJsonGetValue( sBody, [ "documents" ] );
    string sCurrItem;
    list lItems = llJson2List( sItems );
    integer i;
    for ( i = 0; i < llGetListLength( lItems ); i++ )  {
        sCurrItem = llList2String( lItems, i );
        if ( sValue == llJsonGetValue( sCurrItem, lKeyPath ) )  {
            return( sCurrItem );
        }
    }
    return( "" );
}


// Prints the body of the message. For debugging.
DEBUG_PrintBody2Owner( string sIntro, string sBody )  {
    llOwnerSay( "DEBUG: " + sIntro );
    list lLines = llParseString2List( sBody, [ "\n" ], [] );
    integer i;
    for ( i = 0; i < llGetListLength( lLines ); i++ )  {
        llOwnerSay( llList2String( lLines, i ) );
    }
}



// States ---------------------------------------------------------------------------------------------

default
{
    state_entry()  {
        state waiting;
    }
}

state waiting {
    state_entry()  {
        string sDesc = llGetObjectDesc();
        if ( g_sMailingList != sDesc )  {
            g_sMailingList = sDesc;
            if ( g_sMailingList == "" )  {
                g_sMailingList = DEFAULTMAILINGLIST;
            }
            // See comments in the definition of updateBody().
            g_lSubscribeValues = [
                "description", " This is an updated description.", 0,  // override
                "details,subscriptions", g_sMailingList, 2  // add to array
            ];
            g_lWithdrawValues = [
                "details,subscriptions", g_sMailingList, -2  // remove from array
            ];
            g_lValuesToUpdate = g_lSubscribeValues;

            llSay( 0, "Ready for subscriptions to '" + g_sMailingList + "'...." );
        }
    }

    touch_end( integer n )  {
        // Who touched?
        t_kUserUUID = llDetectedKey( 0 );
        t_sUsername = llGetUsername( t_kUserUUID );

        // Which side was touched?
        g_iFace = llDetectedTouchFace( 0 );

        if ( g_iFace == FACESUBSCRIBE )  {
            g_lValuesToUpdate = g_lSubscribeValues;
            g_sSuccessMsg = MSGADDED + " to " + g_sMailingList + ".";
            state userget;
        }

        else if ( g_iFace == FACEUNSUBSCRIBE )  {
            g_lValuesToUpdate = g_lWithdrawValues;
            g_sSuccessMsg = MSGREMOVED + " from \"" + g_sMailingList + "\".";
            state userget;
        }

        else if ( g_iFace == FACEPROMOS )  {
            state promoget;
        }

        else if ( g_iFace == FACERESET )  {
            llResetScript();
        }

        else // any other side
            llLoadURL( t_kUserUUID, "DNN Software corporate website", URLDNNSOFTWARE );
    }
}

// Check if the user already exists with a GET.
state userget {
    state_entry()  {
        g_sUserJson = "";
        t_kHttpReqGet = llHTTPRequest(
            TGTDOMAIN + "/ContentItems?contentTypeId=" + (string) DNNUSERCONTENTTYPEID,
            BASIC_HTTP_PARAMETERS + [ HTTP_METHOD, "GET" ],
            "" );
        llSetTimerEvent( WAITSECS );
    }

    http_response( key request_id, integer status, list metadata, string body )  {
        if ( request_id == t_kHttpReqGet )  {
            llSetTimerEvent( 0 );

            // Parse the response.
            if (( status >= 200 ) && ( status < 300 ))  {

                // Look for the node under "documents" where "name" == t_sUsername
                g_sUserJson = getRecord( body, [ "name" ], t_sUsername );

                // If found, extract the important information.
                if ( g_sUserJson != "" )  {
                    t_kDNNID = llJsonGetValue( g_sUserJson, [ "id" ] );
                    state userput;
                }

                // If the user does not exist, create a new content item with a POST.
                else
                    state userpost;
            }

            // If something went wrong.
            else  {
                notifyUser( t_kUserUUID, "Something went wrong. Please try again. (GET status: " +  (string) status + ")" );
                state waiting;
            }
        }
    }

    timer()  {
        notifyUser( t_kUserUUID, "The server did not respond within " + (string) WAITSECS + " seconds. Please try again." );
        llSetTimerEvent( 0 );
        state waiting;
    }

    state_exit()  {
        llSetTimerEvent( 0 );
    }
}


// Create a new SL User content item with a POST.
state userpost {
    state_entry()  {
        string sPostStr = createBody( t_kUserUUID, t_sUsername, g_sMailingList );

        t_kHttpReqPost = llHTTPRequest(
            TGTDOMAIN + "/ContentItems?publish=true",
            BASIC_HTTP_PARAMETERS + [ HTTP_METHOD, "POST" ],
            sPostStr );
        llSetTimerEvent( WAITSECS );
    }

    http_response( key request_id, integer status, list metadata, string body )  {
        if ( request_id == t_kHttpReqPost )  {
            llSetTimerEvent( 0 );

            // If successful.
            if (( status >= 200 ) && ( status < 300 ))
                notifyUser( t_kUserUUID, g_sSuccessMsg + " (POST status: " +  (string) status + ")" );

            // If something went wrong.
            else {
                notifyUser( t_kUserUUID, "Something went wrong. Please try again. (POST status: " +  (string) status + ")" );
            }

            state waiting;
        }
    }

    timer()  {
        notifyUser( t_kUserUUID, "The server did not respond within " + (string) WAITSECS + " seconds. Please try again." );
        llSetTimerEvent( 0 );
        state waiting;
    }

    state_exit()  {
        llSetTimerEvent( 0 );
    }
}


// Update an existing SL User content item with a PUT.
state userput {
    state_entry()  {
        // Get the record of the specific user.
        t_kHttpReqGet = llHTTPRequest(
            TGTDOMAIN + "/ContentItems/" + t_kDNNID,
            BASIC_HTTP_PARAMETERS + [ HTTP_METHOD, "GET" ],
            "" );
        llSetTimerEvent( WAITSECS );
    }

    http_response( key request_id, integer status, list metadata, string body )  {
        // Handle the response to the specific GET.
        if ( request_id == t_kHttpReqGet )  {
            llSetTimerEvent( 0 );

            // If we got the specific user's info, make updates then PUT.
            if (( status >= 200 ) && ( status < 300 ))  {
                g_sUserJson = body;
                t_kDNNID = llJsonGetValue( g_sUserJson, [ "id" ] );

                string sPostStr = updateBody( g_sUserJson, g_lValuesToUpdate );

                t_kHttpReqPut = llHTTPRequest(
                    TGTDOMAIN + "/ContentItems/" + t_kDNNID + "?publish=true",
                    BASIC_HTTP_PARAMETERS + [ HTTP_METHOD, "PUT" ],
                    sPostStr );

                llSetTimerEvent( WAITSECS );
            }

            // If something went wrong.
            else  {
                notifyUser( t_kUserUUID, "Something went wrong. Please try again. (GET SPECIFIC status: " +  (string) status + ")" );
                state waiting;
            }
        }

        // Handle the response to the PUT.
        else if ( request_id == t_kHttpReqPut )  {
            llSetTimerEvent( 0 );

            // If success.
            if (( status >= 200 ) && ( status < 300 ))  {
                notifyUser( t_kUserUUID, g_sSuccessMsg + " (PUT status: " +  (string) status + ")" );
            }

            // If something went wrong.
            else  {
                notifyUser( t_kUserUUID, "Something went wrong. Please try again. (PUT status: " +  (string) status + ")" );
            }

            state waiting;
        }
    }

    timer()  {
        notifyUser( t_kUserUUID, "The server did not respond within " + (string) WAITSECS + " seconds. Please try again." );
        llSetTimerEvent( 0 );
        state waiting;
    }

    state_exit()  {
        llSetTimerEvent( 0 );
    }
}


// Show current promos or news.
state promoget {
    state_entry()  {
        t_kHttpReqGet = llHTTPRequest(
            TGTDOMAIN + "/ContentItems?ContentTypeId=" + (string) DNNPROMOCONTENTTYPEID,
            BASIC_HTTP_PARAMETERS + [ HTTP_METHOD, "GET" ],
            "" );
        llSetTimerEvent( WAITSECS );
    }

    http_response( key request_id, integer status, list metadata, string body )  {
        if ( request_id == t_kHttpReqGet )  {
            llSetTimerEvent( 0 );

            // Parse the response.
            if (( status >= 200 ) && ( status < 300 ))  {
                string sItems = llJsonGetValue( body, [ "documents" ] );
                string sCurrItem;
                integer iStart;
                integer iEnd;
                integer iNow = llGetUnixTime();
                list lItems = llJson2List( sItems );
                integer i;
                for ( i = 0; i < llGetListLength( lItems ); i++ )  {
                    sCurrItem = llList2String( lItems, i );

                    iStart = (integer) llJsonGetValue( sCurrItem, [ "details", "startDate" ] );
                    iEnd   = (integer) llJsonGetValue( sCurrItem, [ "details", "endDate" ] );

                    if (( iStart <= iNow  ) && ( iNow <= iEnd ))  {
                        string sTitle = llJsonGetValue( sCurrItem, [ "name" ] );
                        string sMsg = llJsonGetValue( sCurrItem, [ "details", "promoDescription" ] );
                        notifyUser( t_kUserUUID, sTitle + " " + sMsg );
                    }
                }
            }

            // If something went wrong.
            else  {
                notifyUser( t_kUserUUID, "Something went wrong. Please try again. (GET status: " +  (string) status + ")" );
            }

            state waiting;
        }
    }

    timer()  {
        notifyUser( t_kUserUUID, "The server did not respond within " + (string) WAITSECS + " seconds. Please try again." );
        llSetTimerEvent( 0 );
        state waiting;
    }

    state_exit()  {
        llSetTimerEvent( 0 );
    }
}

// ==================================================
